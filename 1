package ravens.localization;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import java.util.Map;
import java.util.HashMap;
import java.util.Comparator;
import java.util.Collections;
import org.apache.commons.io.FileUtils;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.ParseException;
import com.gzoltar.lib.core.GZoltar;
import ravens.infrastructure.ExecShellCmd;
import com.gzoltar.lib.core.components.Statement;
import com.gzoltar.lib.core.instr.testing.TestResult;


public class FaultLocalization
{
    private static Options options;

    static {
	options = new Options();
	options.addOption("projdpath", true, "Faulty Project's Directory Path");
    }
    
    
    public static void main(String[] args) {
        String java7 = "export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/jvm/java-7-openjdk-amd64/bin:/root/fault-localization-data/defects4j/framework/bin && export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64/ && export JAVA_JRE=/usr/lib/jvm/java-7-openjdk-amd64/jre";
	CommandLineParser clparser = new DefaultParser();
	CommandLine cmd_line = null;
	try { cmd_line = clparser.parse(options, args); }
	catch (ParseException exp) {
	    System.err.println("CommandLine Parsing Failed: " + exp);
	}
	if (cmd_line == null) { return; }
       
	String projdpath=null;
	boolean addstacktrace = false;
	

	if (cmd_line.hasOption("projdpath")) {
	    String value = cmd_line.getOptionValue("projdpath");
	    //System.out.println("Project Directory Path: " + value);
	    projdpath = value;
	}
	else {
	    System.out.println("Project Directory Path Not Available.");
	    return;
	}
	
	    //Generate a test suite file including all the test classes in the binary test directory
            String tsuitefpath = projdpath+"/"+"testsuite_classes";
	    File tsuite_f = new File(tsuitefpath);
	    if (!tsuite_f.exists()) {
		    
		String collect_tests_cmd[] ={"/bin/bash","-c" , java7 + " &&  defects4j export -p tests.all -o  testsuite_classes"};
                ExecShellCmd es =new ExecShellCmd(collect_tests_cmd,projdpath,true,true);
		es.waitExit();
		try{
		     System.out.println(es.getErr());
		}catch(Exception e)
		{
		     System.err.println("error ");
		}
	    }
	   // System.out.println("Test Suite File Path: " + tsuitefpath);
         
        String dependencies=null;

        String collect_dependencies_cmd[] = {"/bin/bash", "-c", java7 + " && defects4j export -p cp.test"};

	ExecShellCmd ses = new ExecShellCmd(collect_dependencies_cmd, projdpath, true,false);
	ses.waitExit();
	try{
	   dependencies = ses.getOutput();
	  
	  }catch(Exception e)
	    {
        	System.err.printf("err");
	
	    }

        String targetclasses=null;

        String collect_target_cmd[]= {"/bin/bash","-c", java7+ " && defects4j export -p classes.modified"};	

	ses = new ExecShellCmd(collect_target_cmd, projdpath,true,false);
        ses.waitExit();
	try{
	   targetclasses = ses.getOutput();
	  
	  }catch(Exception e)
	    {
        	System.err.printf("err");
	
	    }

        List<String> tpackage_list = new ArrayList<String>();      
        String modifiedclasses[]=  targetclasses.split("\n");
        targetclasses="";
	for(int i=0;i<modifiedclasses.length;i++)
	 {targetclasses=targetclasses+modifiedclasses[i]+":";
	  tpackage_list.add(modifiedclasses[i].substring(0,modifiedclasses[i].lastIndexOf(".")));
	 }
	



        String  relevanttests=null;

        String collect_target_test[]= {"/bin/bash","-c", java7+ " && defects4j export -p tests.relevant"};	

	ses = new ExecShellCmd(collect_target_test, projdpath,true,false);
        ses.waitExit();
	try{
	   relevanttests = ses.getOutput();
	  
	  }catch(Exception e)
	    {
        	System.err.printf("err");
	
	    }

        
        System.out.println(relevanttests);
        String tests[]=  relevanttests.split("\n");
	String targettests="";
	for(int i=0;i<tests.length;i++)
		targettests=targettests+tests[i]+":";
	
	
	 System.out.println(targetclasses);
         for(String t:tpackage_list)
	 System.out.print(t);
         long start_time = System.currentTimeMillis();
	 FaultLocalization fl = new FaultLocalization();
	List<String> rslt_list = fl.searchGZoltar("Lang", projdpath, dependencies, "/testsuite_classes", tpackage_list, true);
	System.out.println(rslt_list.size());
	StringBuilder sb = new StringBuilder();
	for (String rslt_line : rslt_list) { sb.append(rslt_line); sb.append("\n"); }
	try { FileUtils.writeStringToFile(projdpath+"/xu", sb.toString().trim()); }
	catch (Throwable t) { System.err.println(t); t.printStackTrace(); }
	long end_time = System.currentTimeMillis();
	System.out.println("Fauloc execution time: " + (end_time - start_time));

	 
	}
	//else {
	//    //We add the names of directories directly under the project's test build directory 
	//    //E.g., you have the directory named "org", then "org" is used as the package name
	//    File ptbd = new File(projtestbuilddpath);
	//    File[] ptbd_files = ptbd.listFiles();
	//    for (File ptbd_file : ptbd_files) {
	//	if (ptbd_file.isDirectory()) {
	//	    tpackage_list.add(ptbd_file.getName());
	//	}
	//    }
	//}
	//System.out.print("Target Package(s): ");
	//for (String tpackage0 : tpackage_list) {
	//    System.out.print(tpackage0+" ");
	//}
	//System.out.println();

	//

	//long start_time = System.currentTimeMillis();
	//FaultLocalization fl = new FaultLocalization();
	//List<String> rslt_list = fl.searchGZoltar(bugid, projdpath, dependjpath, tsuitefpath, tpackage_list, addstacktrace);
	//StringBuilder sb = new StringBuilder();
	//for (String rslt_line : rslt_list) { sb.append(rslt_line); sb.append("\n"); }
	//try { FileUtils.writeStringToFile(outputf, sb.toString().trim()); }
	//catch (Throwable t) { System.err.println(t); t.printStackTrace(); }
	//long end_time = System.currentTimeMillis();
	//System.out.println("Fauloc execution time: " + (end_time - start_time));

    public List<String> searchGZoltar(String bug_id, String projdpath, String dependjfpath, String tsuitefpath, List<String> tpackage_list, boolean addstacktrace) {
	List<String> rslt_list = new ArrayList<String>();
	double threshold = 0;
	ArrayList<String> classpaths = new ArrayList<String>();
	classpaths.add(dependjfpath);
	
	GZoltar gz = null;
	try { gz = new GZoltar(new File(projdpath).getAbsolutePath()); }
	catch (Throwable t) { System.err.println(t); t.printStackTrace(); }
	if (gz == null) { return rslt_list; }
	gz.setClassPaths(classpaths);

	//Add instr package
	for (String tpackage : tpackage_list) {
	    gz.addPackageToInstrument(tpackage);
	}

	//Add test-suite classes
	File testsuite_classes_f = new File(projdpath+"/"+tsuitefpath);
	List<String> testsuite_classes = getTestSuiteClasses(testsuite_classes_f);
        System.out.print(testsuite_classes.size());
	for (String testsuite_class : testsuite_classes) {
	    //System.out.println(testsuite_class);
	    gz.addTestToExecute(testsuite_class);
	    gz.addClassNotToInstrument(testsuite_class);
	}
         
	gz.run();
	int[] sum = new int[2];
	List<TestResult> test_rslts = gz.getTestResults();
	for (TestResult tr : test_rslts) {
	    sum[0]++;
	    sum[1] += tr.wasSuccessful() ? 0 : 1;
	    if(!tr.wasSuccessful()){
		if (addstacktrace) {
		    rslt_list.add("Test failed: "+tr.getName());
		    rslt_list.add(tr.getTrace());
		}
		else {
		    System.out.println("Test failed: "+tr.getName());
		    System.out.println(tr.getTrace());
		}
	    }
	}
	System.out.println("Gzoltar Test Result Total:"+sum[0]+", fails: "+sum[1] + ", GZoltar suspicious "+gz.getSuspiciousStatements().size());

    	List<Statement> stmt_list = new ArrayList<Statement>();
	List<Statement> gz_susp_stmt_list = gz.getSuspiciousStatements();
	for (Statement s : gz_susp_stmt_list) {
	    String compName = s.getMethod().getParent().getLabel();
	    double susp = s.getSuspiciousness();
	    if (susp > threshold) { stmt_list.add(s); }
	}

	Collections.sort(stmt_list, new StmtComparator());

	for (Statement s : stmt_list) {
	    String rslt_s = "Suspicious line:" + s.getMethod().getParent().getLabel() + "," + s.getLineNumber() + "," + s.getSuspiciousness();
	    rslt_list.add(rslt_s);
	}
//	
	return rslt_list;
    }

    private List<String> getTestSuiteClasses(File f) {
	List<String> testsuite_classes = new ArrayList<String>();
	if (!f.exists() || !f.canRead()) { return testsuite_classes; }
	String ftext = null;
	try { ftext = FileUtils.readFileToString(f, (String)null).trim(); }
	catch (Throwable t) { System.err.println(t); t.printStackTrace(); }
	if (ftext == null) { return testsuite_classes; }
	
	String[] class_items = ftext.split("\n");
	for (String class_item : class_items) {
	    if (class_item.endsWith(".class")) {
		String class_item0 = class_item.substring(0, class_item.lastIndexOf(".class"));
		testsuite_classes.add(class_item0);
	    }
	    else {
		testsuite_classes.add(class_item);
	    }
	}
	return testsuite_classes;
    }
    
 public class StmtComparator implements Comparator<Statement>{
	@Override
	public int compare(Statement s1, Statement s2) {
	    if(s1 == null || s2 == null ){ return 0; }
	    return Double.compare(s2.getSuspiciousness(),s1.getSuspiciousness());
	}
    
 }
}
